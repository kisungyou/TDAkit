plot(y[,1],y[,2])
x = gen.2circles(n=200, sd=0)
y = gen.2circles(n=200, sd=0.1)
par(mfrow=c(1,2))
plot(x[,1],x[,2])
plot(y[,1],y[,2])
help(circleUnif)
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3))
plot(x1[,1],x1[,2],pch=18)
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.1")
plot(x3[,1],x3[,2],pch=18,main="sd=0.01")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.01")
plot(x3[,1],x3[,2],pch=18,main="sd=0.1")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.01")
plot(x3[,1],x3[,2],pch=18,main="sd=0.1")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.05")
plot(x3[,1],x3[,2],pch=18,main="sd=0.10")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.05")
plot(x3[,1],x3[,2],pch=18,main="sd=0.10")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
x1 = gen.2circles(n=496)
x2 = gen.2circles(n=496, sd=0.05)
x3 = gen.2circles(n=496, sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=c(-1.1,1.1))
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=c(-1,2))
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
library(TDAkit)
hist(rnorm(200))
help(on.exit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
rm(list=ls())
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
install.packages("shapes", dependencies = TRUE)
library(shapes)
help(procGPA)
data(gorf.dat)
gorf.dat
xold = gorf.dat
xnew = procGPA(xold, scale = TRUE)
xnew = procGPA(xold, scale = TRUE)$rotated
xtmp = as.matrix(scale(xold[,,1], center = TRUE))
xrot = xnew[,,1]
xtmp
solve(t(xtmp)%*%xtmp, t(xtmp)%*%xrot)
xnew = procGPA(xold, scale = FALSE)$rotated
xtmp = as.matrix(scale(xold[,,1], center = TRUE))
xrot = xnew[,,1]
xtmp
solve(t(xtmp)%*%xtmp, t(xtmp)%*%xrot)
help(procOPA)
library(shapes)
data(gorf.dat)
xold = gorf.dat
xtmp = array(0,dim(xold))
dim(xtmp)
library(shapes)
data(gorf.dat)
xold = gorf.dat
xtmp = array(0,dim(xold))
for (k in 1:dim(xold)[3]){
tmpmean = colMeans(xold[,,k])
xtmp[,,k] = xold[,,k] - matrix(rep(tmpmean,dim(xold)[1]), ncol=dim(xold)[2], byrow = TRUE)
}
xx = xtmp[,,1]
colMeans(xx)
xx
xrot = shapes::procGPA(xtmp)$rotated
xrot[,,1]
x1 = xtmp[,,1]
x2 = xrot[,,1]
solve(t(x1)%*%x1, t(x1)%*%x2)
library(TDAkit)
library(TDA)
library(TDAkit)
dlist = list()
ntest = 25
for (i in 1:(2*ntest)){
x1 = TDA::circleUnif(50)
x2 = TDA::circleUnif(50)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
dlist[[i]] = d2landscape(diagx, dimension=0, k=5, inf.replace = FALSE)
}
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="original")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoB")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoF")
library(TDAkit)
library(TDA)
library(TDAkit)
dlist = list()
ntest = 25
for (i in 1:(2*ntest)){
x1 = TDA::circleUnif(50)
x2 = TDA::circleUnif(50)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
}
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="original")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoB")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoF")
library(TDA)
library(TDAkit)
dlist = list()
ntest = 25
for (i in 1:(2*ntest)){
x1 = TDA::circleUnif(50)
x2 = TDA::circleUnif(50)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
}
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="original")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoB")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoF")
library(TDA)
library(TDAkit)
dlist = list()
ntest = 25
for (i in 1:(2*ntest)){
x1 = TDA::circleUnif(50)
x2 = TDA::circleUnif(50)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
}
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="original")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoB")
test.eqdist(dlist, c(rep(1,ntest), rep(2,ntest)), method="discoF")
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDA)
library(TDAkit)
dlist = list()
ntest = 25
for (i in 1:(2*ntest)){
x1 = TDA::circleUnif(50)
x2 = TDA::circleUnif(50)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
}
output = landscape.eclust(dlist)
plot(output)
library(TDAkit)
library(TDAkit)
output = landscape.kgroups(dlist, k=2)
library(TDAkit)
output = landscape.kgroups(dlist, k=2)
library(TDAkit)
# ntest = 25
# for (i in 1:(2*ntest)){
#   x1 = TDA::circleUnif(50)
#   x2 = TDA::circleUnif(50)*0.5
#   x2[,1] = x2[,1] + rep(1,nrow(x2))
#   X <- rbind(x1,x2)
#   X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
#   diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
#   dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
# }
output = landscape.kgroups(dlist, k=2)
output
output$cluster
library(TDAkit)
# ntest = 25
# for (i in 1:(2*ntest)){
#   x1 = TDA::circleUnif(50)
#   x2 = TDA::circleUnif(50)*0.5
#   x2[,1] = x2[,1] + rep(1,nrow(x2))
#   X <- rbind(x1,x2)
#   X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
#   diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
#   dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
# }
output = landscape.kgroups(dlist, k=2)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2holes(n=nn)
x2 = gen.2holes(n=nn, sd=0.05)
x3 = gen.2holes(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
nn = 200
x1 = gen.2holes(n=nn)
x2 = gen.2holes(n=nn, sd=0.05)
x3 = gen.2holes(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nrow(x1)
help(runif)
n=10
#############################################
# generate
vec.r = stats::runif(n, min=0, max=1)
vec.t = stats::runif(n, min=0, max=(2*pi))
cbind(vec.r*cos(vec.t), vec.r*sin(vec.t))
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
x = list()
for (i in 1:5){x[[i]] = 1}
y = list()
for (i in 1:5){y[[i]] = rnorm(i)}
x
y
c(x,y)
library(TDAkit)
