dat.death     = as.vector(diagram[,3])
# dimension
dimension = round(dimension)
idin = base::intersect(which((!is.infinite(dat.dimension))), which(dat.dimension==dimension))
idin
dat.dimension = dat.dimension[idin] # separate out the ones
dat.birth     = dat.birth[idin]
dat.death     = dat.death[idin]
mytseq = seq(from=0, to=max(dat.death), length.out=200)
library(TDAkit)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0)
idin = base::intersect(which((!is.infinite(dat.dimension))), which(dat.dimension==dimension))
idin
dat.dimension = dat.dimension[idin] # separate out the ones
dat.birth     = dat.birth[idin]
dat.death     = dat.death[idin]
dat.death
diagram = diagx
diagram
dat.dimension = round(as.vector(diagram[,1]))
dat.birth     = as.vector(diagram[,2])
dat.death     = as.vector(diagram[,3])
# dimension
dimension = round(dimension)
idin = base::intersect(which((!is.infinite(dat.dimension))), which(dat.dimension==dimension))
idin
which(!is.infinite(dat.dimension))
dat.dimension
library(TDAkit)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0)
vis1 = vis.landscape(myland1)
graphics.off()
vis0
vis1
myland1
vis0 = vis.landscape(myland0, remove.zeros = TRUE)
vis0 = vis.landscape(myland0, remove.zeros = TRUE)
vis1 = vis.landscape(myland1, remove.zeros = TRUE)
library(TDAkit)
# # personal test -----------------------------------------------------------
# library(TDA)
# x1 = TDA::circleUnif(30)
# x2 = TDA::circleUnif(30)*0.5
# x2[,1] = x2[,1] + rep(1,nrow(x2))
# X <- rbind(x1,x2)
# X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
# diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
# myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
# myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
#
# vis0 = vis.landscape(myland0, remove.zeros = TRUE)
# vis1 = vis.landscape(myland1, remove.zeros = TRUE)
# personal test -----------------------------------------------------------
library(TDA)
x1 = TDA::circleUnif(30)
x2 = TDA::circleUnif(30)*0.5
x2[,1] = x2[,1] + rep(1,nrow(x2))
X <- rbind(x1,x2)
X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.1), ncol=ncol(X))
diagx  = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
myland0 =  d2landscape(diagx, dimension=0, k=0, inf.replace = FALSE)
myland1 =  d2landscape(diagx, dimension=1, k=0, inf.replace = FALSE)
vis0 = vis.landscape(myland0, remove.zeros = TRUE)
vis1 = vis.landscape(myland1, remove.zeros = TRUE)
library(TDAkit)
vis0 = vis.landscape(myland0, remove.zeros = TRUE)
library(TDAkit)
vis0 = vis.landscape(myland0, remove.zeros = TRUE)
vis1 = vis.landscape(myland1, remove.zeros = TRUE)
vis0
vis1
library(TDAkit)
vis00 = vis.landscape(myland0, show.k = 0)
vis01 = vis.landscape(myland0, show.k = 1)
vis02 = vis.landscape(myland0, show.k = 2)
help("suppressWarnings")
vis00
vis01
vis02
vis10 = vis.landscape(myland1, show.k = 0)
vis11 = vis.landscape(myland1, show.k = 1)
vis12 = vis.landscape(myland1, show.k = 2)
vis10
vis11
vis12
vis10
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
help("d2landscape")
library(TDAkit)
library(TDAkit)
n = 100
n1 = round(n/2)
n2 = round(n-n1)
x1 = TDA::circleUnif(n1)
x2 = TDA::circleUnif(n2)
x2[,1] = x2[,1] + 0.5
xx = rbind(x1,x2)
plot(xx[,1], xx[,2])
x2[,1] = x2[,1] + 1
xx = rbind(x1,x2)
n1 = round(n/2)
n2 = round(n-n1)
x1 = TDA::circleUnif(n1)
x2 = TDA::circleUnif(n2)
x2[,1] = x2[,1] + 1
xx = rbind(x1,x2)
plot(xx[,1], xx[,2])
library(TDAkit)
library(TDAkit)
x = gen.2circles(n=200, sd=0)
y = gen.2circles(n=200, sd=1)
x = gen.2circles(n=200, sd=0)
y = gen.2circles(n=200, sd=1)
par(mfrow=c(1,2))
plot(x[,1],x[,2])
plot(y[,1],y[,2])
x = gen.2circles(n=200, sd=0)
y = gen.2circles(n=200, sd=0.5)
par(mfrow=c(1,2))
plot(x[,1],x[,2])
plot(y[,1],y[,2])
x = gen.2circles(n=200, sd=0)
y = gen.2circles(n=200, sd=0.1)
par(mfrow=c(1,2))
plot(x[,1],x[,2])
plot(y[,1],y[,2])
help(circleUnif)
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3))
plot(x1[,1],x1[,2],pch=18)
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.1")
plot(x3[,1],x3[,2],pch=18,main="sd=0.01")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.01")
plot(x3[,1],x3[,2],pch=18,main="sd=0.1")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.01)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.01")
plot(x3[,1],x3[,2],pch=18,main="sd=0.1")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.05")
plot(x3[,1],x3[,2],pch=18,main="sd=0.10")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0")
plot(x2[,1],x2[,2],pch=18,main="sd=0.05")
plot(x3[,1],x3[,2],pch=18,main="sd=0.10")
## see two sets of intertwined circles
x1 = gen.2circles()
x2 = gen.2circles(sd=0.05)
x3 = gen.2circles(sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
x1 = gen.2circles(n=496)
x2 = gen.2circles(n=496, sd=0.05)
x3 = gen.2circles(n=496, sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,50),rep(2,50)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=c(-1.1,1.1))
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=c(-1,2))
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
library(TDAkit)
hist(rnorm(200))
help(on.exit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
xr = c(-1.1,2.2)
yr = c(-1.1,1.1)
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols,xlim=xr,ylim=yr)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols,xlim=xr,ylim=yr)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols,xlim=xr,ylim=yr)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
rm(list=ls())
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
install.packages("shapes", dependencies = TRUE)
library(shapes)
help(procGPA)
data(gorf.dat)
gorf.dat
xold = gorf.dat
xnew = procGPA(xold, scale = TRUE)
xnew = procGPA(xold, scale = TRUE)$rotated
xtmp = as.matrix(scale(xold[,,1], center = TRUE))
xrot = xnew[,,1]
xtmp
solve(t(xtmp)%*%xtmp, t(xtmp)%*%xrot)
xnew = procGPA(xold, scale = FALSE)$rotated
xtmp = as.matrix(scale(xold[,,1], center = TRUE))
xrot = xnew[,,1]
xtmp
solve(t(xtmp)%*%xtmp, t(xtmp)%*%xrot)
help(procOPA)
library(shapes)
data(gorf.dat)
xold = gorf.dat
xtmp = array(0,dim(xold))
dim(xtmp)
library(shapes)
data(gorf.dat)
xold = gorf.dat
xtmp = array(0,dim(xold))
for (k in 1:dim(xold)[3]){
tmpmean = colMeans(xold[,,k])
xtmp[,,k] = xold[,,k] - matrix(rep(tmpmean,dim(xold)[1]), ncol=dim(xold)[2], byrow = TRUE)
}
xx = xtmp[,,1]
colMeans(xx)
xx
xrot = shapes::procGPA(xtmp)$rotated
xrot[,,1]
x1 = xtmp[,,1]
x2 = xrot[,,1]
solve(t(x1)%*%x1, t(x1)%*%x2)
library(TDAkit)
