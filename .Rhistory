#   X <- X + matrix(rnorm(nrow(X)*ncol(X),sd=0.05), ncol=ncol(X))
#   diagx = ripsDiag(X, maxdimension = 1, maxscale = Inf)$diagram
#   dlist[[i]] = d2landscape(diagx, dimension=0, k=10, inf.replace = FALSE)
# }
output = landscape.kgroups(dlist, k=2)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2holes(n=nn)
x2 = gen.2holes(n=nn, sd=0.05)
x3 = gen.2holes(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
nn = 200
x1 = gen.2holes(n=nn)
x2 = gen.2holes(n=nn, sd=0.05)
x3 = gen.2holes(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
nrow(x1)
help(runif)
n=10
#############################################
# generate
vec.r = stats::runif(n, min=0, max=1)
vec.t = stats::runif(n, min=0, max=(2*pi))
cbind(vec.r*cos(vec.t), vec.r*sin(vec.t))
library(TDAkit)
library(TDAkit)
## see two sets of intertwined circles
nn = 200
x1 = gen.2circles(n=nn)
x2 = gen.2circles(n=nn, sd=0.05)
x3 = gen.2circles(n=nn, sd=0.1)
cols = as.factor(c(rep(1,nn/2),rep(2,nn/2)))
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(x1[,1],x1[,2],pch=18,main="sd=0.00",col=cols)
plot(x2[,1],x2[,2],pch=18,main="sd=0.05",col=cols)
plot(x3[,1],x3[,2],pch=18,main="sd=0.10",col=cols)
on.exit(par(opar))
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(TDAkit)
x = list()
for (i in 1:5){x[[i]] = 1}
y = list()
for (i in 1:5){y[[i]] = rnorm(i)}
x
y
c(x,y)
library(TDAkit)
install.packages("TDA")
version
install.packages("energy")
install.packages("TDAstats")
install.packages("TDAstats")
devtools::document()
library(TDAkit)
library(TDAkit)
## Generate Data with Different Noise Levels
nn = 200
x1 = gen2holes(n=nn, sd=0)
x2 = gen2holes(n=nn, sd=0.1)
x3 = gen2holes(n=nn, sd=0.25)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
plot(x1$data, pch=19, main="sd=0.00", col=x1$label)
plot(x2$data, pch=19, main="sd=0.10", col=x2$label)
plot(x3$data, pch=19, main="sd=0.25", col=x3$label)
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
#         Compute L_2 Distance for 3 Types of Landscapes
#
# We will compare dim=0,1 with top-5 landscape functions with
# - Class 1 : 'iris' dataset with noise
# - Class 2 : samples from 'gen2holes()'
# - Class 3 : samples from 'gen2circles()'
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute L2 Distance Matrix
dmat0 = fsdist(list_land0, p=2)
dmat1 = fsdist(list_land1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(dmat0[,(3*(ndata)):1], axes=FALSE, main="distance : dim=0")
image(dmat1[,(3*(ndata)):1], axes=FALSE, main="distance : dim=1")
par(opar)
library(TDAkit)
# - Class 3 : samples from 'gen2circles()'
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute L2 Distance Matrix
dmat0 = fsdist(list_land0, p=2)
dmat1 = fsdist(list_land1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(dmat0[,(3*(ndata)):1], axes=FALSE, main="distance : dim=0")
image(dmat1[,(3*(ndata)):1], axes=FALSE, main="distance : dim=1")
par(opar)
library(TDAkit)
# - Class 3 : samples from 'gen2circles()'
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute L2 Distance Matrix
dmat0 = fsdist(list_land0, p=2)
dmat1 = fsdist(list_land1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(dmat0[,(3*(ndata)):1], axes=FALSE, main="distance : dim=0")
image(dmat1[,(3*(ndata)):1], axes=FALSE, main="distance : dim=1")
par(opar)
help("diag2silhouette")
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
sdmat0
list_sil0
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
ss1 = list_sil0[[1]]
class(ss1)
class(list_sil0[[2]])
class(list_sil0[[100]])
class(list_sil0[[length(list_sil0)]])
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
library(TDAkit)
# Use 'iris' data and compute its distance matrix
XX = as.matrix(iris[,1:4])
DX = stats::dist(XX)
# Compute VR Diagram with two inputs
vr.mat = diagRips(XX)
vr.dis = diagRips(DX)
class(var.mat)
class(vr.mat)
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
class(PDrips)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
class(PDrips)
# Example : Draw the Figures ----------------------------------------------
#
# (1) Filtration
# (2) PD and Barcode
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"))
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"), rel_heights = c(1,1))
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"), rel_heights = c(1,1))
library(TDAkit)
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
plot_grid(obj_barcode, obj_diagram)
11/250
3/80
19/320
(9/8)*(1 - 1/5 - 1/4 + 1/8)
