list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Silhouettes
list_sil0 = list()
list_sil1 = list()
for (i in 1:(3*ndata)){
list_sil0[[i]] = diag2silhouette(list_rips[[i]], dimension=0)
list_sil1[[i]] = diag2silhouette(list_rips[[i]], dimension=1)
}
## Compute L2 Distance Matrices
ldmat0 = fsdist(list_land0, p=2)
ldmat1 = fsdist(list_land1, p=2)
sdmat0 = fsdist(list_sil0, p=2)
sdmat1 = fsdist(list_sil1, p=2)
## Visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
image(ldmat0[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=0")
image(ldmat1[,(3*(ndata)):1], axes=FALSE, main="Landscape : dim=1")
image(sdmat0[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=0")
image(sdmat1[,(3*(ndata)):1], axes=FALSE, main="Silhouette : dim=1")
par(opar)
library(TDAkit)
library(TDAkit)
# Use 'iris' data and compute its distance matrix
XX = as.matrix(iris[,1:4])
DX = stats::dist(XX)
# Compute VR Diagram with two inputs
vr.mat = diagRips(XX)
vr.dis = diagRips(DX)
class(var.mat)
class(vr.mat)
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
class(PDrips)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
class(PDrips)
# Example : Draw the Figures ----------------------------------------------
#
# (1) Filtration
# (2) PD and Barcode
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"))
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"), rel_heights = c(1,1))
plot_grid(obj_barcode, obj_diagram, labels=c("(a)","(b)"), rel_heights = c(1,1))
library(TDAkit)
rm(list=ls())
library(TDAkit)
library(ggplot2)
library(cowplot)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("tda_draw.R")
graphics.off()
# (1) Filtration ----------------------------------------------------------
# generate data
ndata    = 200
dot.size = 0.75
line.wid = 0.05
xx    = TDAkit::gen2holes(n=ndata, sd=0.1)$data
dat   = cbind(-xx[,2], xx[,1])
dists = as.vector(stats::dist(dat))
# (2) PD and Barcode ------------------------------------------------------
PDrips = TDAkit::diagRips(xx, maxdim=1)
obj_barcode = plot(PDrips, method="barcode")
obj_diagram = plot(PDrips, method="diagram")
plot_grid(obj_barcode, obj_diagram)
11/250
3/80
19/320
(9/8)*(1 - 1/5 - 1/4 + 1/8)
library(TDAkit)
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
#  We try to get distance in dimensions 0 and 1.
list_land0 = list()
list_land1 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
list_land1[[i]] = diag2landscape(list_rips[[i]], dimension=1, k=5)
}
## Compute Persistence Landscape Kernel Matrix
plk0 <- plkernel(list_land0)
plk1 <- plkernel(list_land1)
library(TDAkit)
plk0 <- plkernel(list_land0)
plk1 <- plkernel(list_land1)
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2), pty="s")
image(plk0[,(3*(ndata)):1], axes=FALSE, main="Kernel : dim=0")
image(plk1[,(3*(ndata)):1], axes=FALSE, main="Kernel : dim=1")
par(opar)
help("diag2landscape")
help(diagRips)
library(TDAkit)
help(plkernel)
library(TDAkit)
library(TDAkit)
X = matrix(rnorm(5*2), ncol=2)
DX = stats::dist(X)
DX
nrow(DX)
attributes(DX)
attr(DX, "Size")
help(attr)
library(TDAkit)
library(TDAkit)
library(TDAkit)
library(T4cluster)
help("sc05Z")
library(TDAkit)
# ---------------------------------------------------------------------------
#           Spectral Clustering Clustering via Energy Distance
#
# We will cluster dim=0 under top-5 landscape functions with
# - Class 1 : 'iris' dataset with noise
# - Class 2 : samples from 'gen2holes()'
# - Class 3 : samples from 'gen2circles()'
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
list_land0 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
}
## Run Spectral Clustering using Different K's.
label2  = fssc05Z(list_land0, k=2)
label3  = fssc05Z(list_land0, k=3)
label4  = fssc05Z(list_land0, k=4)
truelab = rep(c(1,2,3), each=ndata)
## Run MDS & Visualization
embed = fsmds(list_land0, ndim=2)
opar  = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
plot(embed, col=truelab, pch=19, main="true label")
plot(embed, col=label2,  pch=19, main="k=2 label")
plot(embed, col=label3,  pch=19, main="k=3 label")
plot(embed, col=label4,  pch=19, main="k=4 label")
par(opar)
# ---------------------------------------------------------------------------
#           Spectral Clustering Clustering via Energy Distance
#
# We will cluster dim=0 under top-5 landscape functions with
# - Class 1 : 'iris' dataset with noise
# - Class 2 : samples from 'gen2holes()'
# - Class 3 : samples from 'gen2circles()'
# ---------------------------------------------------------------------------
## Generate Data and Diagram from VR Filtration
ndata     = 10
list_rips = list()
for (i in 1:ndata){
dat1 = as.matrix(iris[,1:4]) + matrix(rnorm(150*4), ncol=4)
dat2 = gen2holes(n=100, sd=1)$data
dat3 = gen2circles(n=100, sd=1)$data
list_rips[[i]] = diagRips(dat1, maxdim=1)
list_rips[[i+ndata]] = diagRips(dat2, maxdim=1)
list_rips[[i+(2*ndata)]] = diagRips(dat3, maxdim=1)
}
## Compute Persistence Landscapes from Each Diagram with k=5 Functions
list_land0 = list()
for (i in 1:(3*ndata)){
list_land0[[i]] = diag2landscape(list_rips[[i]], dimension=0, k=5)
}
## Run Spectral Clustering using Different K's.
label2  = fssc05Z(list_land0, k=2)
label3  = fssc05Z(list_land0, k=3)
label4  = fssc05Z(list_land0, k=4)
truelab = rep(c(1,2,3), each=ndata)
## Run MDS & Visualization
embed = fsmds(list_land0, ndim=2)
opar  = par(no.readonly=TRUE)
par(mfrow=c(2,2), pty="s")
plot(embed, col=truelab, pch=19, main="true label")
plot(embed, col=label2,  pch=19, main="k=2 label")
plot(embed, col=label3,  pch=19, main="k=3 label")
plot(embed, col=label4,  pch=19, main="k=4 label")
par(opar)
library(TDAkit)
help("fssc05Z")
## Numerical 1 : ER models
rm(list=ls())
library(igraph)
library(TDAkit)
library(latentnet)
library(cowplot)
library(network)
library(GGally) # https://briatte.github.io/ggnet/ for reference
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("sources_draw.R")
source("sources_feature.R")
# parameters --------------------------------------------------------------
ngraph = 50    # graph per class
p_er   = 0.25
p_bi   = 0.05
n_min  = 80
n_max  = 120
# data generation ---------------------------------------------------------
list_all = list()
for (i in 1:ngraph){
nsize1 = round(stats::runif(1, min=n_min, max=n_max))
nsize2 = round(stats::runif(1, min=n_min, max=n_max))
n21 = round(nsize2/2)
n22 = nsize2-n21
graph_er     = as.matrix(igraph::as_adjacency_matrix(igraph::sample_gnp(nsize1, p_er)))
graph_bi     = as.matrix(igraph::as_adjacency_matrix(igraph::sample_gnp(nsize1, p_bi)))
list_all[[i]]        = network::as.network(graph_er, directed=FALSE)
list_all[[i+ngraph]] = network::as.network(graph_bi, directed=FALSE)
}
# MLE ---------------------------------------------------------------------
n_all = length(list_all)
fit_latents = vector("list", n_all)
fit_effect  = rep(0, n_all)
fit_labels  = as.factor(rep(c("high","low"), each=ngraph))
for (i in 1:n_all){
graph_i = list_all[[i]]
fitts_i = latentnet::ergmm(graph_i~euclidean(d=2), tofit="mle")
fit_effect[i]    = fitts_i$mle$beta
fit_latents[[i]] = fitts_i$mle$Z
print(paste0("iteration ",i,"/",n_all," complete..."))
}
# TDA : PD ----------------------------------------------------------------
list_diagrams = list()
for (i in 1:length(list_all)){
list_diagrams[[i]] = TDAkit::diagRips(fit_latents[[i]], maxdim=1)
}
# TDA : landscape ---------------------------------------------------------
list_land0 = list()
list_land1 = list()
for (i in 1:length(list_diagrams)){
PDi = list_diagrams[[i]]
list_land0[[i]] = TDAkit::diag2landscape(PDi, dimension=0)
list_land1[[i]] = TDAkit::diag2landscape(PDi, dimension=1)
print(paste0("iteration ",i,"/",n_all," complete..."))
}
# TDA : pairwise distance -------------------------------------------------
land0dist = fsdist(list_land0)
land1dist = fsdist(list_land1)
# report : hypothesis testing ---------------------------------------------
TDAkit::fseqdist(land0dist, fit_labels, method="original", mc.iter=99999)
library(energy)
help("eqdist.e")
energy::eqdist.etest(land0dist, c(50,50), distance=TRUE, method="original", R=99999)
dd = energy::eqdist.etest(land0dist, c(50,50), distance=TRUE, method="original", R=99999)
dd$p.value
energy::eqdist.etest(land0dist, c(50,50), distance=TRUE, method="discoB",   R=99999)
energy::eqdist.etest(land0dist, c(50,50), distance=TRUE, method="original", R=999999)
energy::eqdist.etest(land1dist, c(50,50), distance=TRUE, method="original", R=99999)
energy::eqdist.etest(land1dist, c(50,50), distance=TRUE, method="discoB",   R=99999)
# report : clustering -----------------------------------------------------
lab_dim0_kg = energy::kgroups(land0dist,k = 2)
lab_dim0_km = TDAkit::fskmedoids(land0dist, k=2)
lab_dim0_sc = TDAkit::fssc05Z(land0dist, k=2)
lab_dim0_sc
lab_dim1_sc = TDAkit::fssc05Z(land1dist, k=2)
library(T4cluster)
help("compare.rand")
compare.rand(fit_labels, lab_dim0_kg)
# report : clustering -----------------------------------------------------
lab_dim0_kg = energy::kgroups(land0dist,k = 2)$cluster
lab_dim1_kg = energy::kgroups(land1dist,k = 2)$cluster
compare.rand(fit_labels, lab_dim0_kg)
compare.rand(fit_labels, lab_dim1_kg)
compare.rand(fit_labels, lab_dim1_km)
lab_dim0_km = TDAkit::fskmedoids(land0dist, k=2)
lab_dim1_km = TDAkit::fskmedoids(land1dist, k=2)
lab_dim0_sc = TDAkit::fssc05Z(land0dist, k=2)
lab_dim1_sc = TDAkit::fssc05Z(land1dist, k=2)
compare.rand(fit_labels, lab_dim1_km)
compare.rand(fit_labels, lab_dim0_km)
compare.rand(fit_labels, lab_dim0_sc)
compare.rand(fit_labels, lab_dim1_sc)
library(TDAkit)
library(TDAkit)
rm(list=ls())
library(TDAkit)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("data_positions.RData")
# data scrambling, PD, and landscapes -------------------------------------
diagrams_1 = list() # elementary
diagrams_2 = list() # middle
diagrams_3 = list() # high
n1 = length(label_element)
n2 = length(label_middle)
n3 = length(label_high)
for (i in 1:length(label_element)){
tmpmat = rbind(element_W[[i]], element_Z[[i]])
diagrams_1[[i]] = TDAkit::diagRips(tmpmat, maxdim=1)
print(paste0("iteration ",i,"/",length(label_element)," complete.."))
}
for (i in 1:length(label_middle)){
tmpmat = rbind(middle_W[[i]], middle_Z[[i]])
diagrams_2[[i]] = TDAkit::diagRips(tmpmat, maxdim=1)
print(paste0("iteration ",i,"/",length(label_middle)," complete.."))
}
for (i in 1:length(label_high)){
tmpmat = rbind(high_W[[i]], high_Z[[i]])
diagrams_3[[i]] = TDAkit::diagRips(tmpmat, maxdim=1)
print(paste0("iteration ",i,"/",length(label_high)," complete.."))
}
land1_dim0 = list()
land1_dim1 = list()
land2_dim0 = list()
land2_dim1 = list()
land3_dim0 = list()
land3_dim1 = list()
for (i in 1:n1){
PDi = diagrams_1[[i]]
land1_dim0[[i]] = TDAkit::diag2landscape(PDi, dimension = 0)
land1_dim1[[i]] = TDAkit::diag2landscape(PDi, dimension = 1)
print(paste0("iteration ",i,"/",n1," complete..."))
}
for (i in 1:n2){
PDi = diagrams_2[[i]]
land2_dim0[[i]] = TDAkit::diag2landscape(PDi, dimension=0)
land2_dim1[[i]] = TDAkit::diag2landscape(PDi, dimension=1)
print(paste0("iteration ",i,"/",n2," complete..."))
}
for (i in 1:n3){
PDi = diagrams_3[[i]]
land3_dim0[[i]] = TDAkit::diag2landscape(PDi, dimension=0)
land3_dim1[[i]] = TDAkit::diag2landscape(PDi, dimension=1)
print(paste0("iteration ",i,"/",n3," complete..."))
}
land1dist_dim0 = fsdist(land1_dim0)
land1dist_dim1 = fsdist(land1_dim1)
land2dist_dim0 = fsdist(land2_dim0)
land2dist_dim1 = fsdist(land2_dim1)
land3dist_dim0 = fsdist(land3_dim0)
land3dist_dim1 = fsdist(land3_dim1)
TDAkit::fseqdist(land1dist_dim0, label_element, method="original", mc.iter=99999)
